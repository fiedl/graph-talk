%!TEX TS-program = ../make.zsh

\subsection{Approach: Use Neo4j Graph Database}

\begin{frame}[t,fragile]{Approach: Use Neo4j Graph Database}
  \begin{columns}[T]
    \begin{column}{0.4\textwidth}
      \scalebox{0.3}{
        \centering
        <%= render "sample_graph", except: [:time], highlight_gretel_can_read_programmheft: true, highlight_gretel_cannot_read_stud_protokolle: true %>
      }
    \end{column}

    \begin{column}{0.6\textwidth}
      \begin{itemize}
        \item<only@1-3> Neo4j is a dedicated graph database, \url{https://neo4j.com/developer/get-started/}
        \item<only@2-3> Query language *Cypher*:

          \begin{cypher}
            match (page:Page)<-[:has_page]-(group:Group)-[:has_subgroup*0..]->(group:Group)-[:has_member]->(user:User {name: "Gretel"})
            return page.name
          \end{cypher}

        \item<only@3-> REST API listening at \url{http://localhost:7474}
        \item<only@4-> Wrapper gem: \url{https://github.com/maxdemarzi/neography}

          \begin{onlyenv}<4>
            \begin{ruby}
              query = "
                match (page:Page)<-[:has_page]-
                  (group:Group)-[:has_subgroup*0..]->
                  (group:Group)-[:has_member]->
                  (user:User {name: "Gretel"})
                return page.name
              "
              neo = Neography::Rest.new("http://localhost:7474")
              neo.execute_query(query)
                # => ["Verbandszeitschrift", "Ausgabe 1", "Protokolle", "Programmheft", "Leitfaden"]
            \end{ruby}
          \end{onlyenv}

        \item<only@5-> **Pros**: Complex native graph queries without compromises
        \item<only@6-> **Cons**:
          \begin{itemize}
            \item Need another query language not supported by `ActiveRecord`
            \item The neo4j java environment alone takes 1\,GB memory
            \item Query time (regardless of complexity) 10\,ms .. 1000\,ms
          \end{itemize}

      \end{itemize}
    \end{column}
  \end{columns}
\end{frame}
