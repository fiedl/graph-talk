%!TEX TS-program = ../make.zsh

## Problem: Many parents

\begin{frame}[t,fragile]{Problem: Many parents}
  \begin{columns}[T]
    \begin{column}{0.4\textwidth}
      \scalebox{0.6}{
        \centering
        \only<1-2>{<%= render "sample_graph", except: [:pages, :time], show_all_officers: false, show_all_members: false, show_officers: false, show_officer_assignments: false %>}%
        \only<3>{<%= render "sample_graph", except: [:pages, :time], show_all_officers: false, show_all_members: false, show_officer_assignments: false %>}%
        \only<4>{<%= render "sample_graph", except: [:pages, :time], show_all_officers: false, show_all_members: false %>}%
        \only<5>{<%= render "sample_graph", except: [:pages, :time], show_all_members: false %>}%
        \only<6>{<%= render "sample_graph", except: [:pages, :time] %>}%
        \only<7>{<%= render "sample_graph", except: [:pages, :time], highlight: :all_members %>}%
        \only<8-9>{<%= render "sample_graph", except: [:pages, :time], highlight: :all_officers %>}%
      }
    \end{column}

    \begin{column}{0.6\textwidth}
      \begin{itemize}
        \item<only@1-6> In a tree, each node has only one parent.

          \begin{ruby}
            class Group < ApplicationRecord
              has_many :direct_members, # ...
              has_many :child_groups, # ...
              has_one :parent_group, # ...
            end
          \end{ruby}

        \item<only@2-6> What if we need more than one parent?

          \begin{ruby}
            class Group < ApplicationRecord
              has_many :direct_members, # ...
              has_many :child_groups, # ...
              has_many :parent_groups, # ...
            end
          \end{ruby}

        \item<only@2-6> DAG = directed acyclic graph

        \item<only@7-9> Usage examples:
          \begin{itemize}
            \item<only@7> Find out whether a user is a member of the super organization:
              \begin{ruby}
                class User < ApplicationRecord
                  def organization_member?
                    Group.find_by(name: "Alle Mitglieder").members.include? self
                  end

                  def guest?
                    not organization_member?
                  end
                end
              \end{ruby}
            \item<only@8-9> Write an email to all officers.
              \begin{ruby}
                recipient_addresses = Group.find_by("Alle Amtsträger").members.pluck(:email)
              \end{ruby}
            \item<only@9> Assign abilities to officers.
              \begin{ruby}
                class Ability
                  include CanCan::Ability

                  def initialize(user)
                    can :use, :admins_panel do
                      user.in? Group.find_by("Alle Amtsträger").members
                    end
                  end
                end
              \end{ruby}
          \end{itemize}

      \end{itemize}
    \end{column}
  \end{columns}
\end{frame}
