%!TEX TS-program = ../make.zsh

## Problem: Many parents

\begin{frame}[t,fragile]{Problem: Many parents}
  \begin{columns}[T]
    \begin{column}{0.4\textwidth}
      \scalebox{0.6}{
        \centering
        \only<1>{<%= render "sample_graph", except: [:pages, :time], show_all_officers: false, show_all_members: false, show_officers: false, show_officer_assignments: false %>}%
        \only<2>{<%= render "sample_graph", except: [:pages, :time], show_all_officers: false, show_all_members: false, show_officer_assignments: false %>}%
        \only<3>{<%= render "sample_graph", except: [:pages, :time], show_all_officers: false, show_all_members: false %>}%
        \only<4>{<%= render "sample_graph", except: [:pages, :time], show_all_members: false %>}%
        \only<5>{<%= render "sample_graph", except: [:pages, :time] %>}%
        \only<6>{<%= render "sample_graph", except: [:pages, :time], highlight: :all_members %>}%
        \only<7>{<%= render "sample_graph", except: [:pages, :time], highlight: :all_officers %>}%
      }
    \end{column}

    \begin{column}{0.6\textwidth}
      \begin{itemize}
        \item In a tree, each node has only one parent.
        \item What if we need more than one parent?

          \begin{ruby}
            class Group < ApplicationRecord
              has_many :direct_members, # ...
              has_many :child_groups, # ...
              has_many :parent_groups, # ...
            end
          \end{ruby}

        \item Then we need a DAG, a directed acyclic graph, in which each node can have many children and many parents.

        %\item TODO: Approach ags-as-dag: Implementation: \url{https://github.com/resgraph/acts-as-dag}

        \item Usage examples:

          \begin{ruby}

            # Find out whether a user is a member of the whole organization:
            class User < ApplicationRecord
              def organization_member?
                Group.find_by(name: "Alle Mitglieder").members.include? self
              end

              def guest?
                not organization_member?
              end
            end

            # Write an email to all officers.
            recipient_addresses = Group.find_by("Alle AmtstrÃ¤ger").members.pluck(:email)

          \end{ruby}

      \end{itemize}
    \end{column}
  \end{columns}
\end{frame}
